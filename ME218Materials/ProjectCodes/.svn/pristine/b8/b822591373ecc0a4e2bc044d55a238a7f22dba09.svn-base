/*----------------------------- Include Files -----------------------------*/
// Basic includes for a program using the Events and Services Framework
#include "ES_Configure.h"
#include "ES_Framework.h"

#include "DrsSM.h"
#include "SSI.h"

/*----------------------------- Module Defines ----------------------------*/
#define DRS_SAMPLE_RATE 120			// Sample every 120ms
#define DRS_QUERY_RATE 2				// Wait 2ms before byte transfer

// macro definition for DRS command
#define CMD_GAME_STATUS 0x3f
#define CMD_KART_1 			0xc3
#define CMD_KART_2			0x5a
#define CMD_KART_3			0x7e
#define CMD_DEFAULT			0x00

/*---------------------------- Module Functions ---------------------------*/


/*---------------------------- Module Variables ---------------------------*/
static DrsState_t CurrentState;
static uint8_t MyPriority;
static uint8_t CurrentByte;

static uint8_t KartStatus[3];

static uint16_t KartPositionX[3];
static uint8_t	KartPosMsbX[3];
static uint16_t KartPositionY[3];
static uint8_t	KartPosMsbY[3];
static uint16_t KartOrientation[3];
static uint8_t 	KartOriMsb[3];

/*------------------------------ Module Code ------------------------------*/

bool InitDrsSM( uint8_t Priority)
{
	ES_Event ThisEvent;

	MyPriority = Priority;  // save our priority

	ES_Timer_InitTimer(DRS_TIMER_SAMPLE, DRS_SAMPLE_RATE);
	
	CurrentByte = 0;

	return true;
}

bool PostDrsSM( ES_Event ThisEvent )
{
	return ES_PostToService( MyPriority, ThisEvent);
}

ES_Event RunDrsSM( ES_Event CurrentEvent )
{
   DrsState_t NextState = CurrentState;
   ES_Event ReturnEvent = {ES_NO_EVENT, 0};

   switch ( CurrentState )
   {
       case ST_DRS_IDLE :
			 {
				 // Sample data every 100ms
				 if (CurrentEvent.EventType == ES_TIMEOUT && CurrentEvent.EventParam == DRS_TIMER_SAMPLE)
				 {
					 CurrentState = ST_GAME_STATUS;
					 ES_Timer_InitTimer(DRS_TIMER_SAMPLE, DRS_SAMPLE_RATE);
					 
					 // Start from querying game status
					 SendCommand(CMD_GAME_STATUS);
					 ES_Timer_InitTimer(DRS_TIMER_QUERY, DRS_QUERY_RATE);
					 
					 // Print out current status for debugging
//					 for (int i=0; i<3; i++)
//					 {
//						 printf("\r\n--------------------------Kart %u----------------------------- \n", i);
//						 printf("\rRace Status: %d\n", KartStatus[i]);
//						 printf("\rPosition: (%d, %d)\n", KartPositionX[i], KartPositionY[i]);
//						 printf("\rOrientation: %d\n", KartOrientation[i]);
//					 }
							
				 }
         break;
			 }
			 case ST_GAME_STATUS:
			 {
				 // Process Game Status Data
				 if (CurrentEvent.EventType == ES_TIMEOUT && CurrentEvent.EventParam == DRS_TIMER_QUERY)
				 {
					 uint8_t Data = GetCommand();
					 
					 if (CurrentByte < 7)
					 {
						 SendCommand(CMD_DEFAULT);
						 switch (CurrentByte)
						 {
							case 3:
								KartStatus[0] = Data;
								break;
							case 4:
								KartStatus[1] = Data;
								break;
							case 5:
								KartStatus[2] = Data;
								break;
							default:
								break;
						 }
						 CurrentByte += 1;
					 }
					 else
					 {
						 // Query Kart 1 information
						 SendCommand(CMD_KART_1);
						 CurrentState = ST_KART_1;
						 CurrentByte = 0;
					 }
					 ES_Timer_InitTimer(DRS_TIMER_QUERY, DRS_QUERY_RATE);
				 }
				 break;
			 }
			 case ST_KART_1:
			 {
				 // Process Kart 1 information
				 if (CurrentEvent.EventType == ES_TIMEOUT && CurrentEvent.EventParam == DRS_TIMER_QUERY)
				 {
					 uint8_t Data = GetCommand();
					 
					 if (CurrentByte < 7)
					 {
						 SendCommand(CMD_DEFAULT);
						 switch (CurrentByte)
						 {
							case 2:
								KartPosMsbX[0] = Data;
								break;
							case 3:
								KartPositionX[0] = (KartPosMsbX[0] << 8) | Data;
								break;
							case 4:
								KartPosMsbY[0] = Data;
								break;
							case 5:
								KartPositionY[0] = (KartPosMsbY[0] << 8) | Data;
								break;
							case 6:
								KartOriMsb[0] = Data;
							default:
								break;
						 }
						 CurrentByte += 1;
					 }
					 else
					 {
						 // Query Kart 1 information
						 SendCommand(CMD_KART_1);
						 KartOrientation[0] = (KartOriMsb[0] << 8) | Data;
						 
						 CurrentState = ST_KART_2;
						 CurrentByte = 0;
					 }
					 ES_Timer_InitTimer(DRS_TIMER_QUERY, DRS_QUERY_RATE);
				 }

				 break;
			 }
			 case ST_KART_2:
			 {
				 // Process Kart 2 information
				 if (CurrentEvent.EventType == ES_TIMEOUT && CurrentEvent.EventParam == DRS_TIMER_QUERY)
				 {
					 uint8_t Data = GetCommand();
					 
					 if (CurrentByte < 7)
					 {
						 SendCommand(CMD_DEFAULT);
						 switch (CurrentByte)
						 {
							case 2:
								KartPosMsbX[1] = Data;
								break;
							case 3:
								KartPositionX[1] = (KartPosMsbX[1] << 8) | Data;
								break;
							case 4:
								KartPosMsbY[1] = Data;
								break;
							case 5:
								KartPositionY[1] = (KartPosMsbY[1] << 8) | Data;
								break;
							case 6:
								KartOriMsb[1] = Data;
							default:
								break;
						 }
						 CurrentByte += 1;
					 }
					 else
					 {
						 // Query Kart 2 information
						 SendCommand(CMD_KART_2);
						 KartOrientation[1] = (KartOriMsb[1] << 8) | Data;
						 
						 CurrentState = ST_KART_3;
						 CurrentByte = 0;
					 }
					 ES_Timer_InitTimer(DRS_TIMER_QUERY, DRS_QUERY_RATE);
				 }
				 break;
			 }
			 case ST_KART_3:
			 {
				 // Process Kart 3 information
				 if (CurrentEvent.EventType == ES_TIMEOUT && CurrentEvent.EventParam == DRS_TIMER_QUERY)
				 {
					 uint8_t Data = GetCommand();
					 
					 if (CurrentByte < 7)
					 {
						 SendCommand(CMD_DEFAULT);
						 switch (CurrentByte)
						 {
							case 2:
								KartPosMsbX[2] = Data;
								break;
							case 3:
								KartPositionX[2] = (KartPosMsbX[2] << 8) | Data;
								break;
							case 4:
								KartPosMsbY[2] = Data;
								break;
							case 5:
								KartPositionY[2] = (KartPosMsbY[2] << 8) | Data;
								break;
							case 6:
								KartOriMsb[2] = Data;
							default:
								break;
						 }
						 CurrentByte += 1;
					 }
					 else
					 {
						 // Query Kart 3 information
						 SendCommand(CMD_KART_3);
						 KartOrientation[2] = (KartOriMsb[2] << 8) | Data;
						 
						 CurrentState = ST_DRS_IDLE;
						 CurrentByte = 0;
					 }
					 ES_Timer_InitTimer(DRS_TIMER_QUERY, DRS_QUERY_RATE);
				 }
				 break;
			 }
    }
    return(ReturnEvent);
}

DrsState_t QueryDrsSM ( void )
{
   return(CurrentState);
}


uint8_t GetRemainingLaps( uint8_t KartNum )
{
	uint8_t result = KartStatus[KartNum] & (BIT0HI | BIT1HI | BIT2HI);
	return result;
}

uint8_t GetRaceStatus( uint8_t KartNum )
{
	uint8_t result = KartStatus[KartNum] & (BIT3HI | BIT4HI);
	result = result >> 3;		// right shift 3 bits
	return result;
}

bool IsTargetHit( uint8_t KartNum )
{
	return (KartStatus[KartNum] & BIT7HI);
}

bool IsObstacleDone( uint8_t KartNum )
{
	return (KartStatus[KartNum] & BIT6HI);
}

uint16_t GetKartPositionX( uint8_t KartNum )
{
	return KartPositionX[KartNum];
}
uint16_t GetKartPositionY( uint8_t KartNum )
{
	return KartPositionY[KartNum];
}
uint16_t GetKartOrientation( uint8_t KartNum )
{
	return KartOrientation[KartNum];
}