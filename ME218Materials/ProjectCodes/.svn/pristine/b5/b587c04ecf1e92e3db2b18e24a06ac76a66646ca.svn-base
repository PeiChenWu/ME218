/*----------------------------- Include Files -----------------------------*/
// Basic includes for a program using the Events and Services Framework
#include "ES_Configure.h"
#include "ES_Framework.h"

#include "Init.h"
#include "DrsSM.h"

#include "KartSM.h"
#include "NavigatingSM.h"

#include "DcMotorService.h"

/*----------------------------- Module Defines ----------------------------*/
// define constants for the states for this machine
// and any other local defines

#define ENTRY_STATE ST_Adjust_Orientation

/*---------------------------- Module Functions ---------------------------*/
/* prototypes for private functions for this machine, things like during
   functions, entry & exit functions.They should be functions relevant to the
   behavior of this state machine
*/
static uint16_t GetTravelDirection( void );

/*---------------------------- Module Variables ---------------------------*/
// everybody needs a state variable, you may need others as well
static NavigatingState_t CurrentState;
static uint16_t CurrentPos[2];
static uint16_t CurrentOri;
static uint16_t GoalOri;

/*------------------------------ Module Code ------------------------------*/

ES_Event RunNavigatingSM( ES_Event CurrentEvent )
{
   bool MakeTransition = false;/* are we making a state transition? */
   NavigatingState_t NextState = CurrentState;
   ES_Event EntryEventKind = { ES_ENTRY, 0 };// default to normal entry to new state
   ES_Event ReturnEvent = CurrentEvent; // assume we are not consuming event

   switch ( CurrentState )
   {
		 case ST_Adjust_Orientation:
		 {
			 break;
		 }
		 case ST_Move:
		 {
			 break;
		 }		 
   }
    //   If we are making a state transition
    if (MakeTransition == true)
    {
       // Execute exit function for current state
       CurrentEvent.EventType = ES_EXIT;
       RunNavigatingSM(CurrentEvent);

       CurrentState = NextState; //Modify state variable

       // Execute entry function for new state
       // this defaults to ES_ENTRY
       RunNavigatingSM(EntryEventKind);
     }
		 
     return(ReturnEvent);
}

void StartNavigatingSM ( ES_Event CurrentEvent )
{
   if ( ES_ENTRY_HISTORY != CurrentEvent.EventType )
   {
        CurrentState = ENTRY_STATE;
   }
	 
   // call the entry function (if any) for the ENTRY_STATE
	 CurrentPos[0] = GetKartPositionX(MyKartNum);
	 CurrentPos[1] = GetKartPositionY(MyKartNum);
	 CurrentOri = GetKartOrientation(MyKartNum);
	 GetTravelDirection();
	 
   RunNavigatingSM(CurrentEvent);
}


NavigatingState_t QueryNavigatingSM ( void )
{
   return(CurrentState);
}

uint16_t GetTravelDirection( void )
{
	
}
