; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\outputs\es_framework.o --asm_dir=.\Outputs\ --list_dir=.\Outputs\ --depend=.\outputs\es_framework.d --cpu=Cortex-M4.fp --apcs=interwork -IC:\ti\TivaWare_C_Series-2.1.0.12573 -I.\Headers -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.0.0\Device\Include\TM4C123 -DTM4C123GH6PM -Drvmdk -DPART_TM4C123GH6PM -DTARGET_IS_TM4C123_RB1 --omf_browse=.\outputs\es_framework.crf Source\ES_Framework.c]
                          THUMB

                          AREA ||i.ES_Initialize||, CODE, READONLY, ALIGN=2

                  ES_Initialize PROC
;;;241    ****************************************************************************/
;;;242    ES_Return_t ES_Initialize( TimerRate_t NewRate ){
000000  b570              PUSH     {r4-r6,lr}
;;;243      uint8_t i;
;;;244      ES_Timer_Init( NewRate); // start up the timer subsystem
000002  f7fffffe          BL       ES_Timer_Init
;;;245      // loop through the list testing for NULL pointers and
;;;246      for ( i=0; i< ARRAY_SIZE(ServDescList); i++) {
;;;247        if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
000006  4d10              LDR      r5,|L1.72|
000008  2400              MOVS     r4,#0                 ;246
;;;248             (ServDescList[i].RunFunc == (pRunFunc)0) )
;;;249          return FailedPointer; // protect against NULL pointers
;;;250        // and initializing the event queues (must happen before running inits)  
;;;251        ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
00000a  f1050608          ADD      r6,r5,#8
                  |L1.14|
00000e  f8550034          LDR      r0,[r5,r4,LSL #3]     ;247
000012  b1a8              CBZ      r0,|L1.64|
000014  eb0500c4          ADD      r0,r5,r4,LSL #3       ;248
000018  6840              LDR      r0,[r0,#4]            ;248
00001a  b188              CBZ      r0,|L1.64|
00001c  eb0600c4          ADD      r0,r6,r4,LSL #3
000020  7901              LDRB     r1,[r0,#4]
000022  f8560034          LDR      r0,[r6,r4,LSL #3]
000026  f7fffffe          BL       ES_InitQueue
;;;252       // executing the init functions
;;;253        if ( ServDescList[i].InitFunc(i) != true )
00002a  f8551034          LDR      r1,[r5,r4,LSL #3]
00002e  4620              MOV      r0,r4
000030  4788              BLX      r1
000032  b138              CBZ      r0,|L1.68|
000034  1c64              ADDS     r4,r4,#1
000036  f01404ff          ANDS     r4,r4,#0xff           ;246
00003a  d0e8              BEQ      |L1.14|
;;;254          return FailedInit; // this is a failed initialization
;;;255      }
;;;256      return Success;
00003c  2000              MOVS     r0,#0
;;;257    }
00003e  bd70              POP      {r4-r6,pc}
                  |L1.64|
000040  2003              MOVS     r0,#3                 ;249
000042  bd70              POP      {r4-r6,pc}
                  |L1.68|
000044  2005              MOVS     r0,#5                 ;254
000046  bd70              POP      {r4-r6,pc}
;;;258    
                          ENDP

                  |L1.72|
                          DCD      ||.constdata||

                          AREA ||i.ES_PostAll||, CODE, READONLY, ALIGN=2

                  ES_PostAll PROC
;;;316    ****************************************************************************/
;;;317    bool ES_PostAll( ES_Event ThisEvent){
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;318    
;;;319      uint8_t i;
;;;320      // loop through the list executing the post functions
;;;321      for ( i=0; i< ARRAY_SIZE(EventQueues); i++) {
;;;322        if ( ES_EnQueueFIFO( EventQueues[i].pMem, ThisEvent ) != true ){
000004  4e0d              LDR      r6,|L2.60|
;;;323          break; // this is a failed post
;;;324        }else{
;;;325          Ready |= BitNum2SetMask[i]; // show queue as non-empty
000006  4f0e              LDR      r7,|L2.64|
000008  4d0e              LDR      r5,|L2.68|
00000a  2400              MOVS     r4,#0                 ;321
00000c  4680              MOV      r8,r0                 ;322
                  |L2.14|
00000e  f8560034          LDR      r0,[r6,r4,LSL #3]     ;322
000012  4641              MOV      r1,r8                 ;322
000014  f7fffffe          BL       ES_EnQueueFIFO
000018  b140              CBZ      r0,|L2.44|
00001a  f8370014          LDRH     r0,[r7,r4,LSL #1]
00001e  8829              LDRH     r1,[r5,#0]  ; Ready
000020  1c64              ADDS     r4,r4,#1
000022  4308              ORRS     r0,r0,r1
000024  8028              STRH     r0,[r5,#0]
000026  f01404ff          ANDS     r4,r4,#0xff           ;321
00002a  d0f0              BEQ      |L2.14|
                  |L2.44|
;;;326        }
;;;327      }
;;;328      if ( i == ARRAY_SIZE(EventQueues) ){ // if no failures
00002c  2c01              CMP      r4,#1
00002e  d002              BEQ      |L2.54|
;;;329        return (true);
;;;330      }else{
;;;331        return(false);
000030  2000              MOVS     r0,#0
                  |L2.50|
;;;332      }
;;;333    }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L2.54|
000036  2001              MOVS     r0,#1                 ;329
000038  e7fb              B        |L2.50|
;;;334    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      ||.constdata||+0x8
                  |L2.64|
                          DCD      BitNum2SetMask
                  |L2.68|
                          DCD      ||.data||

                          AREA ||i.ES_PostToService||, CODE, READONLY, ALIGN=2

                  ES_PostToService PROC
;;;349    ****************************************************************************/
;;;350    bool ES_PostToService( uint8_t WhichService, ES_Event TheEvent){
000000  b510              PUSH     {r4,lr}
000002  b960              CBNZ     r0,|L3.30|
;;;351      if ((WhichService < ARRAY_SIZE(EventQueues)) &&
;;;352          (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) == 
000004  4807              LDR      r0,|L3.36|
000006  6800              LDR      r0,[r0,#0]
000008  f7fffffe          BL       ES_EnQueueFIFO
00000c  b138              CBZ      r0,|L3.30|
;;;353                                                                    true )){
;;;354        Ready |= BitNum2SetMask[WhichService]; // show queue as non-empty
00000e  4806              LDR      r0,|L3.40|
000010  8801              LDRH     r1,[r0,#0]
000012  4806              LDR      r0,|L3.44|
000014  8802              LDRH     r2,[r0,#0]  ; Ready
000016  4311              ORRS     r1,r1,r2
000018  8001              STRH     r1,[r0,#0]
;;;355        return true;
00001a  2001              MOVS     r0,#1
;;;356      } else
;;;357        return false;
;;;358    }
00001c  bd10              POP      {r4,pc}
                  |L3.30|
00001e  2000              MOVS     r0,#0                 ;357
000020  bd10              POP      {r4,pc}
;;;359    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      ||.constdata||+0x8
                  |L3.40|
                          DCD      BitNum2SetMask
                  |L3.44|
                          DCD      ||.data||

                          AREA ||i.ES_PostToServiceLIFO||, CODE, READONLY, ALIGN=2

                  ES_PostToServiceLIFO PROC
;;;374    ****************************************************************************/
;;;375    bool ES_PostToServiceLIFO( uint8_t WhichService, ES_Event TheEvent){
000000  b510              PUSH     {r4,lr}
000002  b960              CBNZ     r0,|L4.30|
;;;376      if ((WhichService < ARRAY_SIZE(EventQueues)) &&
;;;377          (ES_EnQueueLIFO( EventQueues[WhichService].pMem, TheEvent) == 
000004  4807              LDR      r0,|L4.36|
000006  6800              LDR      r0,[r0,#0]
000008  f7fffffe          BL       ES_EnQueueLIFO
00000c  b138              CBZ      r0,|L4.30|
;;;378                                                                    true )){
;;;379        Ready |= BitNum2SetMask[WhichService]; // show queue as non-empty
00000e  4806              LDR      r0,|L4.40|
000010  8801              LDRH     r1,[r0,#0]
000012  4806              LDR      r0,|L4.44|
000014  8802              LDRH     r2,[r0,#0]  ; Ready
000016  4311              ORRS     r1,r1,r2
000018  8001              STRH     r1,[r0,#0]
;;;380        return true;
00001a  2001              MOVS     r0,#1
;;;381      } else
;;;382        return false;
;;;383    }
00001c  bd10              POP      {r4,pc}
                  |L4.30|
00001e  2000              MOVS     r0,#0                 ;382
000020  bd10              POP      {r4,pc}
;;;384    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      ||.constdata||+0x8
                  |L4.40|
                          DCD      BitNum2SetMask
                  |L4.44|
                          DCD      ||.data||

                          AREA ||i.ES_Run||, CODE, READONLY, ALIGN=2

                  ES_Run PROC
;;;276    ****************************************************************************/
;;;277    ES_Return_t ES_Run( void ){
000000  b570              PUSH     {r4-r6,lr}
;;;278      // make these static to improve speed
;;;279      uint8_t HighestPrior;
;;;280      static ES_Event ThisEvent;
;;;281      
;;;282      while(1){ // stay here unless we detect an error condition
;;;283    
;;;284        // loop through the list executing the run functions for services
;;;285        // with a non-empty queue. Process any pending ints before testing
;;;286        // Ready
;;;287        while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
;;;288          HighestPrior =  ES_GetMSBitSet(Ready);
000002  4d14              LDR      r5,|L5.84|
000004  e01d              B        |L5.66|
                  |L5.6|
000006  f7fffffe          BL       ES_GetMSBitSet
00000a  4604              MOV      r4,r0
;;;289          if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0 ){
00000c  4812              LDR      r0,|L5.88|
00000e  4911              LDR      r1,|L5.84|
000010  f8500034          LDR      r0,[r0,r4,LSL #3]
000014  1c89              ADDS     r1,r1,#2
000016  f7fffffe          BL       ES_DeQueue
00001a  b928              CBNZ     r0,|L5.40|
;;;290            Ready &= BitNum2ClrMask[HighestPrior]; // mark queue as now empty
00001c  480f              LDR      r0,|L5.92|
00001e  f8301014          LDRH     r1,[r0,r4,LSL #1]
000022  8828              LDRH     r0,[r5,#0]  ; Ready
000024  4388              BICS     r0,r0,r1
000026  8028              STRH     r0,[r5,#0]
                  |L5.40|
;;;291          }
;;;292          if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != 
000028  480b              LDR      r0,|L5.88|
00002a  3808              SUBS     r0,r0,#8
00002c  eb0000c4          ADD      r0,r0,r4,LSL #3
000030  6841              LDR      r1,[r0,#4]
000032  f8d50002          LDR      r0,[r5,#2]  ; ThisEvent
000036  4788              BLX      r1
000038  f0100fff          TST      r0,#0xff
00003c  d001              BEQ      |L5.66|
;;;293                                                                  ES_NO_EVENT) {
;;;294                  return FailedRun;
00003e  2002              MOVS     r0,#2
;;;295          }
;;;296        }
;;;297    
;;;298        // all the queues are empty, so look for new user detected events
;;;299        ES_CheckUserEvents();
;;;300      }
;;;301    }
000040  bd70              POP      {r4-r6,pc}
                  |L5.66|
000042  f7fffffe          BL       _HW_Process_Pending_Ints
000046  b110              CBZ      r0,|L5.78|
000048  8828              LDRH     r0,[r5,#0]            ;287  ; Ready
00004a  2800              CMP      r0,#0                 ;287
00004c  d1db              BNE      |L5.6|
                  |L5.78|
00004e  f7fffffe          BL       ES_CheckUserEvents
000052  e7f6              B        |L5.66|
;;;302    
                          ENDP

                  |L5.84|
                          DCD      ||.data||
                  |L5.88|
                          DCD      ||.constdata||+0x8
                  |L5.92|
                          DCD      BitNum2SetMask

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  Queue0
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ServDescList
                          DCD      InitTestHarnessService0
                          DCD      RunTestHarnessService0
                  EventQueues
                          DCD      Queue0
00000c  06000000          DCB      0x06,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=1

                  Ready
000000  0000              DCB      0x00,0x00
                  ThisEvent
000002  0000              DCB      0x00,0x00
000004  0000              DCB      0x00,0x00
