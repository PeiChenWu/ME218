; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\outputs\pwmdemo.o --asm_dir=.\Outputs\ --list_dir=.\Outputs\ --depend=.\outputs\pwmdemo.d --cpu=Cortex-M4.fp --apcs=interwork -IC:\ti\TivaWare_C_Series-2.1.0.12573 -I.\Headers -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.0.0\Device\Include\TM4C123 -DTM4C123GH6PM -Drvmdk -DPART_TM4C123GH6PM -DTARGET_IS_TM4C123_RB1 --omf_browse=.\outputs\pwmdemo.crf Source\PWMDemo.c]
                          THUMB

                          AREA ||i.InitPWMDemo||, CODE, READONLY, ALIGN=2

                  InitPWMDemo PROC
;;;21     
;;;22     void InitPWMDemo( void ){
000000  4825              LDR      r0,|L1.152|
;;;23       volatile uint32_t Dummy; // use volatile to avoid over-optimization
;;;24       
;;;25     // start by enabling the clock to the PWM Module (PWM0)
;;;26       HWREG(SYSCTL_RCGCPWM) |= SYSCTL_RCGCPWM_R0;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;27     
;;;28     // enable the clock to Port B  
;;;29       HWREG(SYSCTL_RCGCGPIO) |= SYSCTL_RCGCGPIO_R1;
00000a  4823              LDR      r0,|L1.152|
00000c  3838              SUBS     r0,r0,#0x38
00000e  6801              LDR      r1,[r0,#0]
000010  f0410102          ORR      r1,r1,#2
000014  6001              STR      r1,[r0,#0]
;;;30     
;;;31     // Select the PWM clock as System Clock/32
;;;32       HWREG(SYSCTL_RCC) = (HWREG(SYSCTL_RCC) & ~SYSCTL_RCC_PWMDIV_M) |
000016  4821              LDR      r0,|L1.156|
000018  6e01              LDR      r1,[r0,#0x60]
00001a  f4212160          BIC      r1,r1,#0xe0000
00001e  f44111c0          ORR      r1,r1,#0x180000
000022  6601              STR      r1,[r0,#0x60]
;;;33         (SYSCTL_RCC_USEPWMDIV | SYSCTL_RCC_PWMDIV_32);
;;;34       
;;;35     // make sure that the PWM module clock has gotten going
;;;36     	while ((HWREG(SYSCTL_PRPWM) & SYSCTL_PRPWM_R0) != SYSCTL_PRPWM_R0)
000024  481e              LDR      r0,|L1.160|
                  |L1.38|
000026  6801              LDR      r1,[r0,#0]
000028  07c9              LSLS     r1,r1,#31
00002a  d0fc              BEQ      |L1.38|
;;;37         ;
;;;38     
;;;39     // disable the PWM while initializing
;;;40       HWREG( PWM0_BASE+PWM_O_0_CTL ) = 0;
00002c  481d              LDR      r0,|L1.164|
00002e  2100              MOVS     r1,#0
000030  6401              STR      r1,[r0,#0x40]
;;;41     
;;;42     // program generator A to go to 0 at rising comare A, 1 on falling compare A  
;;;43       HWREG( PWM0_BASE+PWM_O_0_GENA) = 
000032  21e0              MOVS     r1,#0xe0
000034  6601              STR      r1,[r0,#0x60]
;;;44         (PWM_0_GENA_ACTCMPAU_ZERO | PWM_0_GENA_ACTCMPAD_ONE );
;;;45     
;;;46     // program generator B to go to 0 at rising comare B, 1 on falling compare B  
;;;47       HWREG( PWM0_BASE+PWM_O_0_GENB) = 
000036  0109              LSLS     r1,r1,#4
000038  6641              STR      r1,[r0,#0x64]
;;;48         (PWM_0_GENA_ACTCMPBU_ZERO | PWM_0_GENA_ACTCMPBD_ONE );
;;;49     
;;;50     // Set the PWM period. Since we are counting both up & down, we initialize
;;;51     // the load register to 1/2 the desired total period
;;;52       HWREG( PWM0_BASE+PWM_O_0_LOAD) = ((PeriodInMS * PWMTicksPerMS)-1)>>1;
00003a  f6404134          MOV      r1,#0xc34
00003e  6501              STR      r1,[r0,#0x50]
;;;53       
;;;54     // Set the initial Duty cycle on A to 50% by programming the compare value
;;;55     // to 1/2 the period to count up (or down) 
;;;56       HWREG( PWM0_BASE+PWM_O_0_CMPA) = ((PeriodInMS * PWMTicksPerMS)-1)>>2;
000040  1049              ASRS     r1,r1,#1
000042  6581              STR      r1,[r0,#0x58]
;;;57     
;;;58     // Set the initial Duty cycle on B to 25% by programming the compare value
;;;59     // to 1/4 the period  
;;;60       HWREG( PWM0_BASE+PWM_O_0_CMPB) = ((PeriodInMS * PWMTicksPerMS)-1)>>3;
000044  1049              ASRS     r1,r1,#1
000046  65c1              STR      r1,[r0,#0x5c]
;;;61     
;;;62     // set changes to the PWM output Enables to be locally syncronized to a 
;;;63     // zero count
;;;64       HWREG(PWM0_BASE+PWM_O_ENUPD) =  (HWREG(PWM0_BASE+PWM_O_ENUPD) & 
000048  6a81              LDR      r1,[r0,#0x28]
00004a  f021010f          BIC      r1,r1,#0xf
00004e  f041010a          ORR      r1,r1,#0xa
000052  6281              STR      r1,[r0,#0x28]
;;;65           ~(PWM_ENUPD_ENUPD0_M | PWM_ENUPD_ENUPD1_M)) |
;;;66           (PWM_ENUPD_ENUPD0_LSYNC | PWM_ENUPD_ENUPD1_LSYNC);
;;;67     
;;;68     // enable the PWM outputs
;;;69       HWREG( PWM0_BASE+PWM_O_ENABLE) |= (PWM_ENABLE_PWM1EN | PWM_ENABLE_PWM0EN);
000054  6881              LDR      r1,[r0,#8]
000056  f0410103          ORR      r1,r1,#3
00005a  6081              STR      r1,[r0,#8]
;;;70     
;;;71     // now configure the Port B pins to be PWM outputs
;;;72     // start by selecting the alternate function for PB6 & 7
;;;73       HWREG(GPIO_PORTB_BASE+GPIO_O_AFSEL) |= (BIT7HI | BIT6HI);
00005c  4912              LDR      r1,|L1.168|
00005e  680a              LDR      r2,[r1,#0]
000060  f04202c0          ORR      r2,r2,#0xc0
000064  600a              STR      r2,[r1,#0]
;;;74     
;;;75     // now choose to map PWM to those pins, this is a mux value of 4 that we
;;;76     // want to use for specifying the function on bits 6 & 7
;;;77       HWREG(GPIO_PORTB_BASE+GPIO_O_PCTL) = 
000066  4911              LDR      r1,|L1.172|
000068  680a              LDR      r2,[r1,#0]
00006a  f3c20213          UBFX     r2,r2,#0,#20
00006e  f1024288          ADD      r2,r2,#0x44000000
000072  600a              STR      r2,[r1,#0]
;;;78         (HWREG(GPIO_PORTB_BASE+GPIO_O_PCTL) & 0x00fffff) + (4<<(7*BitsPerNibble)) +
;;;79           (4<<(6*BitsPerNibble));
;;;80     
;;;81     // Enable pins 6 & 7 on Port B for digital I/O
;;;82     	HWREG(GPIO_PORTB_BASE+GPIO_O_DEN) |= (BIT7HI | BIT6HI);
000074  490d              LDR      r1,|L1.172|
000076  3910              SUBS     r1,r1,#0x10
000078  680a              LDR      r2,[r1,#0]
00007a  f04202c0          ORR      r2,r2,#0xc0
00007e  600a              STR      r2,[r1,#0]
;;;83     	
;;;84     // make pins 6 & 7 on Port B into outputs
;;;85     	HWREG(GPIO_PORTB_BASE+GPIO_O_DIR) |= (BIT7HI |BIT6HI);
000080  4909              LDR      r1,|L1.168|
000082  3920              SUBS     r1,r1,#0x20
000084  680a              LDR      r2,[r1,#0]
000086  f04202c0          ORR      r2,r2,#0xc0
00008a  600a              STR      r2,[r1,#0]
;;;86       
;;;87     // set the up/down count mode and enable the PWM generator
;;;88       HWREG(PWM0_BASE+ PWM_O_0_CTL) |= (PWM_0_CTL_MODE | PWM_0_CTL_ENABLE);
00008c  6c01              LDR      r1,[r0,#0x40]
00008e  f0410103          ORR      r1,r1,#3
000092  6401              STR      r1,[r0,#0x40]
;;;89     
;;;90     }
000094  4770              BX       lr
;;;91     
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      0x400fe640
                  |L1.156|
                          DCD      0x400fe000
                  |L1.160|
                          DCD      0x400fea40
                  |L1.164|
                          DCD      0x40028000
                  |L1.168|
                          DCD      0x40005420
                  |L1.172|
                          DCD      0x4000552c

                          AREA ||i.Set100_0DC||, CODE, READONLY, ALIGN=2

                  Set100_0DC PROC
;;;91     
;;;92     void Set100_0DC(void){
000000  4804              LDR      r0,|L2.20|
;;;93     // Set the Duty cycle on A to 0% by programming the compare value
;;;94     // to 0. However, since the CmpADn action (set to one) wins, we also
;;;95     // need to disable the output  
;;;96       HWREG( PWM0_BASE+PWM_O_0_CMPA) = 0;
000002  2100              MOVS     r1,#0
000004  6581              STR      r1,[r0,#0x58]
;;;97       HWREG( PWM0_BASE+PWM_O_ENABLE) &= ~PWM_ENABLE_PWM0EN;
000006  6881              LDR      r1,[r0,#8]
000008  f0210101          BIC      r1,r1,#1
00000c  6081              STR      r1,[r0,#8]
;;;98     
;;;99     // Set the Duty cycle on B to 100% by programming the compare value
;;;100    // to the load value. Since the CmpBDn action (set to one) wins, we get 100%
;;;101      HWREG( PWM0_BASE+PWM_O_0_CMPB) = HWREG( PWM0_BASE+PWM_O_0_LOAD);
00000e  6d01              LDR      r1,[r0,#0x50]
000010  65c1              STR      r1,[r0,#0x5c]
;;;102    
;;;103    }
000012  4770              BX       lr
                          ENDP

                  |L2.20|
                          DCD      0x40028000
